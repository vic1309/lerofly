---
layout: post
title:  "Numerical Methods - Euler's Method"
date:   2019-06-12 22:15:00
author: Victor de Aguiar
categories: NMtd
text-align: justify
tags:	ode numerical euler
mathjax: true
cover:  "/assets/capa_ode.jpg"
---
**Hello, world! Welcome!**



> **- Why should we care about numerical methods?**

<p align="justify">
lorem ipsum
</p>

<p align="justify"> <i><b>Ex. 1:</b></i> <i>Provide example</i> </p>

I recommend the following reading/watching list for this chapter :

- [Essence of Linear Algebra](https://www.youtube.com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) - **3BLue1Brown**

- [Introduction to Applied Linear Algebra - Vectors, Matrices, and Least Squares](http://vmls-book.stanford.edu/vmls.pdf) - **Stephen Boyd**

- [Linear ALgebra](https://www.math.ucdavis.edu/~linear/linear-guest.pdf) - **David Cherney, Tom Denton, Rohit Thomas and Andrew Waldron**

- [Linear Algebra and its applications](http://www.math.hcmus.edu.vn/~bxthang/Linear%20algebra%20and%20its%20applications.pdf) - **Gilbert Strang**

- [Introduction to Linear Algebra](http://www.math.nagoya-u.ac.jp/~richard/teaching/f2014/Lin_alg_Lang.pdf) - **Serge Lang**

- [Handbook of Linear Algebra](http://www2.fiit.stuba.sk/~kvasnicka/QuantumComputing/Hogben-Handbook%20of%20Linear%20Algebra-%28CRC%20press,%202007%29.pdf) - **Leslie Hogben**

----
----

### Theoretical Background

$$\begin{equation} y_{n+1} = y_{n} + f_{n}h \tag{5} \label{eq:fv} \end{equation}$$

### Examples

> <i><b> Ex. 1: </b> Consider the following initial value problem:</i>

> $$\begin{equation} \frac{dy}{dt} = 3 + e^{-t} - \frac{1}{2}y, \qquad y(0) = 1 \tag{6} \label{eq:six} \end{equation}$$

> <i>Use the Euler Method with step sizes (h) 0.1, 0.05, 0.025 and 0.01 to approximate a numerical solution between $$ 0 \leq t \leq 5 $$. Compare results with the analytical solution respective values.</i> 

In order to find de exact solution $$\phi(t)$$ we must apply the integrating factor method. We have learned how to use it and once that this is not the goal of this section I will leave this work for the reader. After applying it, you will find that the exact solution is given by:

$$\begin{equation} y = \phi(t) = 6 - 2e^{t} - 3e^{\frac{t}{2}} \tag{7} \label{eq:svn} \end{equation}$$  

To apply Euler's Method formula (see Eq. \ref{eq:fv}) we must define $$y_{n}$$, $$f_{n}$$ and the step size *h* to find the next value $$y_{n+1}$$ of our function. For this specific problem, $$f(t,y) = 3 + e^{-t} - \frac{y}{2}$$ and for the initial point, *i.e.* n = 0, we have that $$\mathbf{t_{0} = 0}$$ and $$\mathbf{y_{0} = 1}$$. Hence:

$$ \begin{equation} f_{0} = f(t_{0}, y_{0}) = f(0, 1) = 3 + e^{-t_{0}} - \frac{y_{0}}{2} = 3 + e^{0} - 0.5 = 3.5 \end{equation}$$ 

Using Eq. \ref{eq:fv} and considering *h* = 0.1:

$$\begin{equation} y_{1} = y_{0} + f_{0}h \implies y_{1} = 1 + (3.5)(0.1) = 1.35 \end{equation} \tag{8} \label{eq:egt}$$

Now, to find the numerical approximation for one step ahead ($$y_{n+1} = y_{2}$$) we must calculate the new value of *f(t,y)*, which is:

$$ \begin{equation} f_{1} = f(t_{n}, y_{n}) = f(0.1, 1.35) = 3 + e^{-0.1} - (0.5)(1.35) \approx 3.229837 \tag{9} \label{eq:nne}\end{equation}$$

Finally, using E1. \ref{eq:egt} and Eq. \ref{eq:nne} we find $$y_{2}$$:

$$ \begin{equation} y_{2} = y_{1} + f_{1}h \approx 1.35 + (3.229837)(0.1) \approx 1.672984 \end{equation}$$

We should keep doing this recursively untill the final time *t = 5* but, as you may imagine, it can take a while and turn a really bored task. To work around this problem, let's develop a code using Python!

**Python programming**

First of all, we have to import the [Numpy](https://www.numpy.org/) package which will be the core for the recursively calculation:

```python 
import numpy as np
```
Then, we must define our initial condition and model parameters:

```python
f0 = 1 # initial condition
dt  = 0.1 # step size (0.1, 0.05, 0.025, 0.01) 
tn = 5 # meshgrid size
N_t =  int(tn/dt) # N_t = tn/dt -- Number of meshgrid points
```
Now, it's time to build our 1-D meshgrid, that is, the computational fabric where all calculation is going to be done. For our purposes, the meshgrid is evenly spaced (aka *regular*). To do so, we must use the so-called [Numpy linspace function](https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html) that will equally split our time domain grid ($$0 \leq t \leq 5$$):   

```python
from numpy import linspace, zeros, exp
t = linspace(0, (N_t)*dt, N_t+1) # create evenly spaced time grid
print(t)
```
The function *zeros* imported from Numpy is used to create the initial grids for *y* and *f* (vectors, in this specific case) where all values are initially zero -- except the first *y* element due to the defined initial condition (y(0) = 1), remember? -- and then they are subsequently modified (the recursively work that we did between Eq. \ref{eq:svn} and Eq. \ref{eq:nne}). We need to do that because the computer requires a place previously defined which will receive results as it advances in time. So:

```python       
y = zeros(N_t+1)
f = zeros(N_t+1)
y[0] = f0 # apply the initial condition
print(y)
```

Finally, we are able to numerically solve our first ODE using Euler's Method! 

```python
for n in range(N_t):
    f[n] = 3 + np.exp(-t[n]) - (1/2)*y[n]
    y[n+1] = y[n] + dt*f[n]
```
How does this work? 

- *n* is our step. It will run from 0 up to 49 (50 steps) and for each step it will access the value of the corresponding index;
- *f[n]* is our function. It must be calculated in order to find the value of the numerical solution one step ahead (*y[n+1]*);

Now that you have the numerical solution it's time to code the analytical solution (Eq. \ref{svn}):

```python
ta = np.arange(0, t, 1)
ya = 6 - 2*np.exp(-ta) - 3*np.exp(-ta/2)
```
Much easier, right?

Let's conclude this example! 

<table cellspacing="0" cellpadding="0">
  <tr>
    <th> t </th><th> Exact </th><th> h = 0.1 </th><th> h = 0.05 </th><th> h = 0.025 </th><th> h = 0.01 </th>
  </tr>
  <tr>
    <td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td>
  </tr>
  <tr class="even">
    <td>1</td><td>3.4446</td><td>3.5174</td><td>3.4804</td><td>3.4624</td><td>3.4517</td>
  </tr>
  <tr>
    <td>2</td><td>4.6256</td><td>4.7016</td><td>4.6632</td><td>4.6443</td><td>4.6331</td>
  </tr>
  <tr>
    <td>3</td><td>5.2310</td><td>5.2918</td><td>5.2611</td><td>5.2460</td><td>5.2370</td>
  </tr>
  <tr>
    <td>4</td><td>5.5573</td><td>5.6014</td><td>5.5793</td><td>5.5683</td><td>5.5617</td>
  </tr>
  <tr>
    <td>5</td><td>5.7402</td><td>5.7707</td><td>5.7555</td><td>5.7479</td><td>5.7433</td>
  </tr>
</table>

<a href="https://github.com/vic1309/lerofly/blob/gh-pages/assets/euler_ex1.png" data-lightbox="euler1-large" data-title="Comparison between numerical solutions using ditinct step sizes and the analytical solution.">
  <img src="https://github.com/vic1309/lerofly/blob/gh-pages/assets/euler_ex1.png" title="Comparison between numerical solutions using ditinct step sizes and the analytical solution.">
</a>

/assets/eu.png"
## Eigenvalues and Eigenvectors


----

Cover image by [Earth Observatory - Nasa](https://earthobservatory.nasa.gov/images/41161/katabatic-winds-rake-antarcticas-terra-nova-bay)

[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
[highlight]:   https://highlightjs.org/
[lightbox]:    http://lokeshdhakar.com/projects/lightbox2/
[jekyll-archive]: https://github.com/jekyll/jekyll-archives
[liquid]: https://github.com/Shopify/liquid/wiki/Liquid-for-Designers
